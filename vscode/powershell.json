{
	// Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console1"
	// }
	"PSCustomObject": {
		"prefix": "PSCustomObject Geruest",
		"body": [
			"[PSCustomObject]@{",
			"\t${1:Name} = ${2:Value}",
			"}"
		],
		"description": "Erstellt ein Geruest fuer ein PSCustomObject"
	},
	"NewObject Ordered": {
		"prefix": "PSNewObject ordered",
		"body": [
			"New-Object PSObject -Property ([ordered]@{VMName=$ENV:COMPUTERNAME;Description='Test-VM';Comment='BlaBla'})"
		],
		"description": "Erstellt ein Geruest fuer ein PSCustomObject"
	},
	"NewObject Ordered LineBreak": {
		"prefix": "PSNewObject ordered",
		"body": [
			"New-Object PSObject -Property ([orderd]@{",
			"\tVMName = $$ENV:COMPUTERNAME",
			"\tDescription = 'Test-VM'",
			"\tComment = 'BlaBla'",
			"})"
		],
		"description": "New-Object ordered with Linebreaks"
	},
	"Select-Object Expression": {
		"prefix": "PSSelect-Object",
		"body": [
			"Select-Object @{Label='$1';Expression={$0}}"
		],
		"description": "Select-Object with Expression"
	},
	"Assembly": {
		"prefix": "PSAssembly Laden",
		"body": [
			"# Laden der Assembly aus einer DLL Datei",
			"[System.Reflection.Assembly]::LoadFile(${1:DateiName})",
			"Add-Type -Path ${1:DateiName}"
		],
		"description": "Assembly aus einer Datei (DLL) laden"
	},
	"IfElse": {
		"prefix": "psifelse",
		"body": [
			"  if ( $0 ) {",
			"    ",
			"  } else {",
			"    ",
			"  }"
		],
		"description": "My preferred else formating"
	},
	"Else": {
		"prefix": "pselse",
		"body": [
			"  else {",
			"    $0",
			"  }"
		],
		"description": "My preferred else formating"
	},
	"ElseIf": {
		"prefix": "pselseif",
		"body": [
			"elseif (${1:expression}) {",
			"\t$0",
			"}"
		],
		"description": "Elseif statement"
	},
	"Foreach": {
		"prefix": "psforeach",
		"body": [
			"foreach ($${1:item} in $${2:collection}) {",
			"\t$0",
			"}"
		],
		"description": "Foreach statement"
	},
	"For loop": {
		"prefix": "psfor",
		"body": [
			"for ($${1:ndx} = 0; $${1:ndx} -lt $${2:collection}.Count; $${1:ndx}++) {",
			"\t$0",
			"}"
		],
		"description": "For loop"
	},
	"While loop": {
		"prefix": "pswhile",
		"body": [
			"while (${1:expression}) {",
			"\t$0",
			"}"
		],
		"description": "While loop"
	},
	"Do...while loop": {
		"prefix": "psdowhile",
		"body": [
			"do {",
			"\t$0",
			"} while (${1:expression});"
		],
		"description": "Do...while loop"
	},
	"Help": {
		"prefix": "pshelp",
		"body": [
			"<#",
			".SYNOPSIS",
			"synopsis",
			"",
			".DESCRIPTION",
			"detail",
			"",
			".PARAMETER paramname",
			"Description",
			"",
			".INPUTS",
			"This cmdlet has no inputs.",
			"",
			".OUTPUTS",
			"The cmdlet creates an array of one or more objects with the following properties",
			"",
			".EXAMPLE",
			"example",
			"",
			" returns data similar to the following example:",
			"",
			".NOTES",
			"Data Fabricator - $TM_FILENAME",
			"",
			"Author: Robert C Cain | @ArcaneCode | arcane@arcanetc.com",
			"",
			"This code is Copyright (c) 2020 Robert C Cain All rights reserved",
			"",
			"The code herein is for demonstration purposes.",
			"No warranty or guarantee is implied or expressly granted.",
			"",
			"This module may not be reproduced in whole or in part without",
			"the express written consent of the author.",
			"",
			".LINK",
			"https://github.com/arcanecode/DataFabricator/blob/master/Documentation/CMDLET-HERE.md",
			"",
			".LINK",
			"http://arcanecode.me",
			"",
			".LINK",
			"http://datafabricator.com",
			"#>",
			""
		],
		"description": "Standard Help Template for a Function"
	},
	"File Header": {
		"prefix": "pshead",
		"body": [
			"<#-------------------------------------------------------------------------------------------------",
			"  Data Fabricator - $TM_FILENAME",
			"  Author: Robert C. Cain | @ArcaneCode | arcane@arcanetc.com",
			"		       http://arcanecode.me",
			"",
			"  This code is Copyright (c) $CURRENT_YEAR Robert C. Cain. All rights reserved.",
			"",
			"  The code herein is for demonstration purposes. No warranty or guarantee",
			"  is implied or expressly granted.",
			"",
			"  This module may not be reproduced in whole or in part without the express",
			"  written consent of the author.",
			"-----------------------------------------------------------------------------------------------#>",
			""
		],
		"description": "File Header for PowerShell Headers"
	},
	"Comment Line": {
		"prefix": "psline",
		"body": [
			"#------------------------------------------------------------------------------------------------",
			""
		],
		"description": "Divider Line"
	},
	"Comment Line Indented": {
		"prefix": "pslineindented",
		"body": [
			"  #----------------------------------------------------------------------------------------------",
			""
		],
		"description": "Divider Line, Indented"
	},
	"Comment Section": {
		"prefix": "pssection",
		"body": [
			"#------------------------------------------------------------------------------------------------",
			"#  $0",
			"#------------------------------------------------------------------------------------------------",
			""
		],
		"description": "Section Header"
	},
	"Comment Section Indented": {
		"prefix": "pssectionindented",
		"body": [
			"  #----------------------------------------------------------------------------------------------",
			"  #  $0",
			"  #----------------------------------------------------------------------------------------------",
			""
		],
		"description": "Section Header, Indented"
	},
	"CmdletBinding": {
		"prefix": "pscmdletbinding",
		"body": [
      "	[CmdletBinding()]",
			"  param (",
			"        )",
			""
		],
		"description": "Cmdlet Binding Syntax"
	},
	"Function": {
		"prefix": "psfunction",
		"body": [
			"function $0()",
			"{",
			"	[CmdletBinding()]",
			"  param (",
			"        )",
			"",
			"}",
			""
		],
		"description": "Function Outline"
	},
	"Function advanced": {
		"prefix": "psfuncadv",
		"body": [
			"function ${1:verb}-${2:noun} {",
			"\t<#",
			"\t.SYNOPSIS",
			"\t\tShort description",
			"\t.DESCRIPTION",
			"\t\tLong description",
			"\tEXAMPLE",
			"\t\tExample of how to use this cmdlet",
			"\t.EXAMPLE",
			"\t\tAnother example of how to use this cmdlet",
			"\t#>",
			"\t[CmdletBinding()]",
			"\t[OutputType([${3:type}])]",
			"\tparam(",
			"\t\t[Parameter(Mandatory=\\$true)]",
			"\t\t[string]",
			"\t\t$${4:parameter_name}",
			"\t)",
			"\t",
			"\tbegin {",
			"\t}",
			"\t",
			"\tprocess {",
			"\t\t$0",
			"\t}",
			"\t",
			"\tend {",
			"\t}",
			"}"
		],
		"description": "Advanced function"
	},
	"Try finally": {
		"prefix": "pstryf",
		"body": [
			"try {",
			"\t$0",
			"} finally {",
			"\t",
			"}"
		],
		"description": "Try finally"
	},
	"Try catch finally": {
		"prefix": "pstrycf",
		"body": [
			"try {",
			"\t$0",
			"} catch {",
			"\t# Exception is stored in the automatic variable \\$_",
			"} finally {",
			"\t",
			"}"
		],
		"description": "Try catch finally"
	},
	"Switch statement": {
		"prefix": "psswitch",
		"body": [
			"switch (${1:expression}) {",
			"\t${2:condition} { $0; break }",
			"\tDefault {}",
			"}"
		],
		"description": "Switch statement"
	},
	"Class": {
		"prefix": "psclass",
		"body": [
			"class $0 {",
			"  [string] \\$x",
			"  [int] \\$y",
			"}",
			""
		],
		"description": "Class Outline"
	},
	"Send-MailMessage": {
		"prefix": "psSend-MailMessage",
		"body": [
			"$$Params = @{",
			"    'SmtpServer'  = 'smtp.mycompany.com'",
			"    'Port'        = 25",
			"    'Priority'    = 'Normal'",
			"    'From'        = 'sender@mycompany.com'",
			"    'To'          = 'mainrecipient@mycompany.com'",
			"    'Cc'          = 'copyrecipient@mycompany.com'",
			"    'Bcc'         = 'hiddenrecipient@mycompany.com'",
			"    'Subject'     = 'Mail title'",
			"    'Body'        = 'This is the content of my mail'",
			"    'BodyAsHtml'  = $$false",
			"    'Attachments' = 'c:\\MyFile.txt'",
			"}",
			"Send-MailMessage @Params"
		],
		"description": "Send a mail message"
	},
	"Pester fuer Parameter": {
		"prefix": "PSPester Parameter",
		"body": [
			"It \"Cmdlet ${1:FunctionName} sollte diesen Parameter haben ${2:ParameterName}\" {",
			"\t(Get-Command ${1:FunctionName}).Parameters['${2:ParameterName}'].Count | Should -Be 1",
			"}"
		],
		"description": "Pester Test fuer Parameter"
	},
	"Pester Kompletter Aufbau": {
		"prefix": "PSPester Aufbau",
		"body": [
			"Describe 'Die Beschreibung eines Testfalls' {",
			"\tcontext 'Erster Kontext des Tests'{",
			"\t\tIT 'Erster Test mit Beschreibung'{",
			"\t\t\t $true | should -BeTrue # Erster Testlauf sollte $true sein",
			"\t\t} -Tag 'Test1'",
			"\t} -Tag 'Kontext1'",
			"} -Tag 'Testfall1'"
		],
		"description": "Pester Aufbau mit Describe, Kontext und IT"
	},
	"Pester fuer Datei existiert": {
		"prefix": "PSPester Datei existiert",
		"body": [
			"It \"Datei ${1:Pfad} sollte vorhanden sein\" {",
			"\t'${1:Pfad}' | Should -Exist",
			"}"
		],
		"description": "Pester Test Datei existiert"
	},
	"Pester RegEx Match Patterns": {
		"prefix": "pstestpatterns",
		"body": [
			"    # RegEx Match Strings",
			"    \\$matchPostalCodeUS = '\\d{5}'                        # Matches 12345",
			"    \\$matchPostalCodePlus4US = '\\d{5}-\\d{4}'             # Matches 12345-6789",
			"    \\$matchPhoneUS = '\\d{3}-\\d{3}-\\d{4}'                 # Matches 555-55-5555",
			"    \\$matchTaxpayerIdUS = '\\d{3}-\\d{2}-\\d{4}'            # Matches 111-22-3333",
			"",
			"    \\$matchPostalCodeUK = '[A-Z]{2}\\d[A-Z] \\d[A-Z]{2}'   # Matches AA0A 1AA",
			"    \\$matchPhoneUK = '\\(\\d{3}\\) \\d{4} \\d{4}'             # Matches (111) 2222 3333",
			"    \\$matchTaxpayerIdMatch = '\\d{5} \\d{5}'               # Matches 12345 67890",
			"",
			"    \\$matchDateYYYYMMDD = '\\d{4}-\\d{2}-\\d{2}'            # Matches 2020-01-01",
			"    \\$matchTimeHHMMSS = '\\d{2}:\\d{2}:\\d{2}'              # Matches 23:59:59",
			"    \\$matchTimeHHMMSSAMPM = '\\d{2}:\\d{2}:\\d{2} [AP]M'    # Matches 12:59:59 PM",
			"",
		],
		"description": "Pester Common RegEx Match Patterns"
	},
	"logger": {
		"prefix": "logger",
		"description": "PoShLog Powershell Module based on Serilog",
		"body": [
			"# Logging: ####################################################################",
			"Import-Module PoshLog",
			"Import-Module PoShLog.Enrichers",
			"",
			"$$LogFilename = \"C:\\Temp\\Log-$(Get-Date -Format 'yyyy-MM-d').log\"",
			"",
			"$$Logger = New-Logger |`",
			"    Set-MinimumLevel -Value Verbose |`",
			"    Add-EnrichWithProperty -Name UserName -Value $($env:USERNAME).ToLower() |`",
			"    Add-EnrichWithEnvironment -UserName -MachineName |`",
			"    Add-EnrichWithProcessId | Add-EnrichWithProcessName |`",
			"    Add-EnrichWithExceptionDetails |`",
			"    Add-SinkFile -Path $$LogFilename -OutputTemplate '{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] [{UserName}@{MachineName}] {Message:j}{NewLine}{Exception}' |`",
			"    Add-SinkConsole -OutputTemplate \"{Timestamp:HH:mm:ss.fff} [{Level}] {Message:j}{NewLine}{Exception}\" | `",
			"    Start-Logger -PassThru"
		]
	}
}